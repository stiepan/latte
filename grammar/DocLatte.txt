The Language Latte
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of Latte==

===Literals===
Integer literals //Integer// are nonempty sequences of digits.


String literals //String// have the form
``"``//x//``"``}, where //x// is any sequence of any characters
except ``"`` unless preceded by ``\``.


























POpenBlock literals are recognized by the regular expression
`````{"{"}`````

PCloseBlock literals are recognized by the regular expression
`````{"}"}`````

PIf literals are recognized by the regular expression
`````{"if"}`````

PElse literals are recognized by the regular expression
`````{"else"}`````

PWhile literals are recognized by the regular expression
`````{"while"}`````

PReturn literals are recognized by the regular expression
`````{"return"}`````

PTrue literals are recognized by the regular expression
`````{"true"}`````

PFalse literals are recognized by the regular expression
`````{"false"}`````

PEQU literals are recognized by the regular expression
`````{"=="}`````

PLE literals are recognized by the regular expression
`````{"<="}`````

PGE literals are recognized by the regular expression
`````{">="}`````

PNE literals are recognized by the regular expression
`````{"!="}`````

PAnd literals are recognized by the regular expression
`````{"&&"}`````

POr literals are recognized by the regular expression
`````{"||"}`````

PMinus literals are recognized by the regular expression
`````{"-"}`````

PNot literals are recognized by the regular expression
`````{"!"}`````

PPlus literals are recognized by the regular expression
`````{"+"}`````

PTimes literals are recognized by the regular expression
`````{"*"}`````

PDiv literals are recognized by the regular expression
`````{"/"}`````

PMod literals are recognized by the regular expression
`````{"%"}`````

PLTH literals are recognized by the regular expression
`````{"<"}`````

PGTH literals are recognized by the regular expression
`````{">"}`````

PIdent literals are recognized by the regular expression
`````letter (letter | digit | '_' | ''')*`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in Latte are the following:
  | ``boolean`` | ``false`` | ``int`` | ``string``
  | ``true`` | ``void`` |  | 

The symbols used in Latte are the following:
  | ( | ) | , | ;
  | = | ++ | -- | 

===Comments===
Single-line comments begin with #, //.Multiple-line comments are  enclosed with /* and */.

==The syntactic structure of Latte==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //Program// | -> | //[TopDef]// 
  | //TopDef// | -> | //Type// //PIdent// ``(`` //[Arg]// ``)`` //Block// 
  | //[TopDef]// | -> | //TopDef// 
  |  |  **|**  | //TopDef// //[TopDef]// 
  | //Arg// | -> | //Type// //PIdent// 
  | //[Arg]// | -> | **eps**
  |  |  **|**  | //Arg// 
  |  |  **|**  | //Arg// ``,`` //[Arg]// 
  | //Block// | -> | //POpenBlock// //[Stmt]// //PCloseBlock// 
  | //[Stmt]// | -> | **eps**
  |  |  **|**  | //Stmt// //[Stmt]// 
  | //Stmt// | -> | ``;`` 
  |  |  **|**  | //Block// 
  |  |  **|**  | //Type// //[Item]// ``;`` 
  |  |  **|**  | //PIdent// ``=`` //Expr// ``;`` 
  |  |  **|**  | //PIdent// ``++`` ``;`` 
  |  |  **|**  | //PIdent// ``--`` ``;`` 
  |  |  **|**  | //PReturn// //Expr// ``;`` 
  |  |  **|**  | //PReturn// ``;`` 
  |  |  **|**  | //PIf// ``(`` //Expr// ``)`` //Stmt// 
  |  |  **|**  | //PIf// ``(`` //Expr// ``)`` //Stmt// //PElse// //Stmt// 
  |  |  **|**  | //PWhile// ``(`` //Expr// ``)`` //Stmt// 
  |  |  **|**  | //Expr// ``;`` 
  | //Item// | -> | //PIdent// 
  |  |  **|**  | //PIdent// ``=`` //Expr// 
  | //[Item]// | -> | //Item// 
  |  |  **|**  | //Item// ``,`` //[Item]// 
  | //Type// | -> | ``int`` 
  |  |  **|**  | ``string`` 
  |  |  **|**  | ``boolean`` 
  |  |  **|**  | ``void`` 
  | //[Type]// | -> | **eps**
  |  |  **|**  | //Type// 
  |  |  **|**  | //Type// ``,`` //[Type]// 
  | //Expr6// | -> | //PIdent// 
  |  |  **|**  | //Integer// 
  |  |  **|**  | ``true`` 
  |  |  **|**  | ``false`` 
  |  |  **|**  | //PIdent// ``(`` //[Expr]// ``)`` 
  |  |  **|**  | //String// 
  |  |  **|**  | ``(`` //Expr// ``)`` 
  | //Expr5// | -> | //PMinus// //Expr6// 
  |  |  **|**  | //PNot// //Expr6// 
  |  |  **|**  | //Expr6// 
  | //Expr4// | -> | //Expr4// //MulOp// //Expr5// 
  |  |  **|**  | //Expr5// 
  | //Expr3// | -> | //Expr3// //AddOp// //Expr4// 
  |  |  **|**  | //Expr4// 
  | //Expr2// | -> | //Expr2// //RelOp// //Expr3// 
  |  |  **|**  | //Expr3// 
  | //Expr1// | -> | //Expr2// //PAnd// //Expr1// 
  |  |  **|**  | //Expr2// 
  | //Expr// | -> | //Expr1// //POr// //Expr// 
  |  |  **|**  | //Expr1// 
  | //[Expr]// | -> | **eps**
  |  |  **|**  | //Expr// 
  |  |  **|**  | //Expr// ``,`` //[Expr]// 
  | //AddOp// | -> | //PPlus// 
  |  |  **|**  | //PMinus// 
  | //MulOp// | -> | //PTimes// 
  |  |  **|**  | //PDiv// 
  |  |  **|**  | //PMod// 
  | //RelOp// | -> | //PLTH// 
  |  |  **|**  | //PLE// 
  |  |  **|**  | //PGTH// 
  |  |  **|**  | //PGE// 
  |  |  **|**  | //PEQU// 
  |  |  **|**  | //PNE// 


